using System.Collections;using System.Collections.Generic;using UnityEngine;//http://www.cnblogs.com/mrsunny/archive/2011/06/21/2086080.html Ease数学模型public partial class MtMath {	// Expo Ease	public static float ExpoEaseIn(float time) {		return time == 0 ? 0 : Mathf.Pow(2, 10 * (time/1 - 1)) - 1 * 0.001f;	}	public static float ExpoEaseOut(float time) {		return time == 1 ? 1 : (-Mathf.Pow(2, -10 * time / 1) + 1);	}	public static float ExpoEaseInOut(float time) {		if(time == 0 || time == 1) 			return time;		if (time < 0.5f)			return 0.5f * Mathf.Pow(2, 10 * (time * 2 - 1));		return 0.5f * (-Mathf.Pow(2, -10 * (time * 2 - 1)) + 2);	}}public class MtActionEase : MtActionInterval {	public MtActionInterval InnerAction {		get { return m_inner; }		private set { }	}	protected MtActionInterval m_inner;	public MtActionEase() {	}	protected bool InitWithAction(MtActionInterval action) {		Debug.Assert(action != null, "action couldn't be null!");		if (action == null)			return false;		if (base.InitWithDuration(action.Duration)) {			m_inner = action;			return true;		}		return false;	}#region Overrides Functions	public override void StartWithTarget(Transform target) {		if (target != null && m_inner != null) {			base.StartWithTarget(target);			m_inner.StartWithTarget(target);		} else {			Debug.Log("StartWithTarget error: target or m_inner is null!");		}	}	public override void Stop() {		if (m_inner != null)			m_inner.Stop();		base.Stop();	}	public override void Update(float time) {		m_inner.Update(time);	}#endregion}	public class MtEaseExponentialIn : MtActionEase {		public static MtEaseExponentialIn Create(MtActionInterval action) {		MtEaseExponentialIn easeExpoIn = new MtEaseExponentialIn();		if (easeExpoIn.InitWithAction(action)) 			return  easeExpoIn;		return null;	}	public override MtICloneable Clone() {		return MtEaseExponentialIn.Create(m_inner.Clone() as MtActionInterval);	}	public override MtAction Reverse() {		return MtEaseExponentialOut.Create(m_inner.Reverse() as MtActionInterval);	}	public override void Update(float time) {		m_inner.Update(MtMath.ExpoEaseIn(time));	}}public class MtEaseExponentialOut : MtActionEase {		public static MtEaseExponentialOut Create(MtActionInterval action) {		MtEaseExponentialOut easeExpoOut = new MtEaseExponentialOut();		if (easeExpoOut.InitWithAction(action)) 			return  easeExpoOut;		return null;	}	public override MtICloneable Clone() {		return MtEaseExponentialIn.Create(m_inner.Clone() as MtActionInterval);	}	public override MtAction Reverse() {		return MtEaseExponentialIn.Create(m_inner.Reverse() as MtActionInterval);	}	public override void Update(float time) {		m_inner.Update(MtMath.ExpoEaseOut(time));	}}public class MtEaseExponentialInOut : MtActionEase {		public static MtEaseExponentialInOut Create(MtActionInterval action) {		MtEaseExponentialInOut easeExpoInOut = new MtEaseExponentialInOut();		if (easeExpoInOut.InitWithAction(action)) 			return  easeExpoInOut;		return null;	}	public override MtICloneable Clone() {		return MtEaseExponentialInOut.Create(m_inner.Clone() as MtActionInterval);	}	public override MtAction Reverse() {		return MtEaseExponentialInOut.Create(m_inner.Reverse() as MtActionInterval);	}	public override void Update(float time) {		m_inner.Update(MtMath.ExpoEaseInOut(time));	}}